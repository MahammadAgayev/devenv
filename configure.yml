- hosts: localhost
  tasks:
    - name: Install packages
      apt:
        name: [ "zsh", "git", "tmux", "fzf", "curl"]
      when: ansible_facts['os_family'] == "RedHat" or ansible_facts['os_family'] == "Debian"

#    - name: Install a package with Homebrew
#     homebrew:
#       name: [ "zsh", "git", "tmux", "fzf", "curl", "deno"]
#     when: ansible_facts['ansible_system'] == "Darwin"

    - name: Ensure directories exists
      file:
        path: "{{ ansible_env.HOME }}/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - debug
        - any
        - src
      become: true
    - name: Change shell
      shell: chsh -s `which zsh`
      become: true

    - name: Check if Oh My Zsh is already installed
      stat:
        path: "{{ lookup('env', 'ZSH') | default('/home/{{ ansible_user }}/.oh-my-zsh') }}"
      register: zsh_status

    - name: Install Oh My Zsh
      shell: curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
      args:
        executable: /bin/bash
      when: not zsh_status.stat.exists

    - name: Check if Powerlevel10k theme is already installed
      stat:
        path: "{{ (lookup('env', 'ZSH_CUSTOM') or lookup('env', 'HOME') + '/.oh-my-zsh/custom') + '/themes/powerlevel10k' }}"
      register: p10k_status

    - name: Install Powerlevel10k theme
      shell: git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "{{ (lookup('env', 'ZSH_CUSTOM') or lookup('env', 'HOME') + '/.oh-my-zsh/custom') + '/themes/powerlevel10k' }}"
      when: not p10k_status.stat.exists

    - name: Install zsh plugin autosuggestion
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-autosuggestions.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/plugins/zsh-autosuggestions"

    #Below mainly configuration for myself, feel free to use it.
    - name: Checkout Configuration Files
      ansible.builtin.git:
        repo: https://github.com/MahammadAgayev/devenv.git
        dest: "{{ ansible_env.HOME }}/devenv"

    #SHELL
    - name: Fetch .zshrc
      copy:
        src: "{{ ansible_env.HOME }}/devenv/.zshrc"
        dest: "{{ ansible_env.HOME }}/.zshrc"
        mode: '0644'
    - name: Copy .p10k.zsh
      copy:
        src: "{{ ansible_env.HOME }}/devenv/.p10k.zsh"
        dest: "{{ ansible_env.HOME }}/.p10k.zsh"
        mode: '0644'

    - name: Copy tmux conf
      copy:
        src: "{{ ansible_env.HOME }}/devenv/.tmux.conf"
        dest: "{{ ansible_env.HOME }}/.tmux.conf"
        mode: '0644'

    - name: Copy tmux-sessionizer
      copy:
        src: "{{ ansible_env.HOME }}/devenv/tmux-sessionizer"
        dest: "{{ ansible_env.HOME }}/tmux-sessionizer"
        mode: '0744'

    #NeoVIM
    - name: Copy Neovim Configuration
      copy:
        src: "{{ ansible_env.HOME }}/devenv/nvim/"
        dest: "{{ ansible_env.HOME }}/.config/nvim"

    #Uber's go monorepo setup
    - name: Check if the ~/go-code directory exists
      stat:
        path: "{{ ansible_env.HOME }}/go-code"
      register: dir_status

    - name: Copy the file to $HOME/go-code if the directory exists
      copy:
        src: ".gomonorepo.envrc.local"
        dest: "{{ ansible_env.HOME }}/go-code/.envrc.local"
      when: dir_status.stat.exists

    # LLM helpers
    - name: Check if uv is installed
      command: which uv
      register: uv_check
      failed_when: false
      changed_when: false

    - name: Install uv if not present
      shell: curl -LsSf https://astral.sh/uv/install.sh | sh
      when: uv_check.rc != 0

    - name: Reload shell environment for uv
      shell: source ~/.bashrc || source ~/.zshrc || true
      when: uv_check.rc != 0

    - name: Check if vectorcode is installed
      shell: |
        export PATH="$HOME/.local/bin:$PATH"
        uv tool list
      register: vectorcode_check
      failed_when: false
      changed_when: false

    - name: Install vectorcode CLI with uv
      shell: |
        export PATH="$HOME/.local/bin:$PATH"
        uv tool install 'vectorcode[lsp,mcp]' --python python{{ python_version | default('3.11') }}
      when: vectorcode_check.rc != 0 or "'vectorcode' not in (vectorcode_check.stdout | default(''))"

    - name: Verify vectorcode installation
      shell: |
        export PATH="$HOME/.local/bin:$PATH"
        vectorcode version
      register: vectorcode_version
      changed_when: false

    - name: Display vectorcode version
      debug:
        msg: "VectorCode CLI installed successfully: {{ vectorcode_version.stdout }}"
